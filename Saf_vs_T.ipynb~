{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Populating the interactive namespace from numpy and matplotlib\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/mijiang/anaconda2/lib/python2.7/site-packages/h5py/__init__.py:34: FutureWarning: Conversion of the second argument of issubdtype from `float` to `np.floating` is deprecated. In future, it will be treated as `np.float64 == np.dtype(float).type`.\n",
      "  from ._conv import register_converters as _register_converters\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7ff5d1759910>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib\n",
    "matplotlib.use('Agg')\n",
    "%pylab inline\n",
    "\n",
    "import commands\n",
    "import os\n",
    "import sys\n",
    "import time\n",
    "\n",
    "import shutil\n",
    "import os\n",
    "\n",
    "import h5py\n",
    "\n",
    "from pylab import *\n",
    "import numpy as np\n",
    "import scipy\n",
    "from scipy import interpolate\n",
    "import matplotlib.pyplot as plt\n",
    "from mpl_toolkits.mplot3d import Axes3D\n",
    "from matplotlib import cm\n",
    "\n",
    "import json\n",
    "import pylab\n",
    "import numpy\n",
    "\n",
    "from pylab import *\n",
    "from scipy import *\n",
    "\n",
    "from scipy          import optimize\n",
    "from scipy.optimize import curve_fit\n",
    "\n",
    "from numpy.linalg import inv\n",
    "import re\n",
    "import mmap\n",
    "from linecache import getline\n",
    "\n",
    "import dqmc_analysis_tools as dqmc\n",
    "\n",
    "####################################################\n",
    "#  parameters\n",
    "####################################################\n",
    "seed = 1234567\n",
    "Vs = [3.2, 2.8, 2.4, 2.0, 1.6, 1.2, 0.8]\n",
    "Vs = [2.0]\n",
    "tperps = [0.0, 0.2, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4, 1.6, 1.8, 2.0, 2.2, 2.4, 2.6, 2.8, 3.0, 3.2]\n",
    "U = 4\n",
    "Ns = [16, 36, 64, 100]\n",
    "betas = [1.0, 1.2, 1.5, 1.6, 2.0, 2.2, 2.5, 2.8, 3.0, \\\n",
    "         3.2, 3.5, 4.0, 4.2, 5.0, 6.0, 7.0, 8.0, 10.0, 12.0, 15.0, 20.0, 25.0, 30.0, 35.0, 40.0]\n",
    "#Ls    = [50,  60,  70,  80,  80,   100,   120,  160, 320]\n",
    "tp = 0.0\n",
    "mus = [0.0, -0.05, -0.06, -0.07, -0.08, -0.09, -0.1, -0.15, -0.2, -0.25, -0.3, -0.35, -0.4, -0.45, \\\n",
    "       -0.5, -0.55, -0.6, -0.65, -0.7, -0.75, -0.8, -0.85, -0.9, -0.95, -1.0, -1.05, -1.1, -1.15, \\\n",
    "       -1.2, -1.25, -1.3, -1.35, -1.4, -1.5, -1.6, -1.7, -1.8, -1.9, -2.0, -2.1, -2.2, -2.3, -2.4]\n",
    "mus = [0.0]\n",
    "norb = 3\n",
    "mode = 'averageXZ'  # 'minerrbar'\n",
    "mode = 'minerrbar'\n",
    "    \n",
    "Ms  = ['bo-','rs-','g^-','mv-','c<-','kp-','yh-','bs-','rp-']\n",
    "Mss = ['bo--','rs--','g^--','mv--','c<--','kp--','yh--','bs--','rp--']\n",
    "Ms = ['o','s','^','v','p','h','D','8','<','>','H','o','s','^','v','p','h','D','8','<','>','H']\n",
    "#colors = plt.rcParams['axes.prop_cycle'].by_key()['color']\n",
    "colors = ['C0', 'C1', 'C2', 'C3', 'C4', 'C5', 'C6', 'C7', 'C8', 'C9', 'C0']\n",
    "\n",
    "#########################################################################################\n",
    "clf()   \n",
    "T = zeros(len(betas))\n",
    "\n",
    "def write_data(fname, V, tperp, saf2inf, saf1inf):\n",
    "    f = open(fname,'a') \n",
    "    f.write('{:.6e}\\t{:.6e}\\t{:.6e}\\t{:.6e}\\n'.format(float(V),float(tperp),float(saf2inf),float(saf1inf)))\n",
    "\n",
    "# plot spin structure factor of two f layers vs tperp between them\n",
    "# for fixed V1 and fixed beta\n",
    "\n",
    "Ms = ['o','s','^','v','p','h','D','8','<','>','H','o','s','^','v','p','h','D','8','<','>','H']\n",
    "colors = ['C0', 'C1', 'C2', 'C3', 'C4', 'C5', 'C6', 'c', 'C8', 'C9', 'b','r','g','m','c','k','y']\n",
    "\n",
    "clf()\n",
    "for iN in range(0,len(Ns)):\n",
    "    N = Ns[iN]\n",
    "    for iV1 in range(0,len(Vs)):\n",
    "        for itp in range(0,len(tperps)):\n",
    "            clf()\n",
    "            tperp = tperps[itp]\n",
    "            Ts = []\n",
    "            Saf1 = []; Saf1_err = []\n",
    "            Saf2 = []; Saf2_err = []\n",
    "\n",
    "            for be in betas:\n",
    "                data = '/Users/mijiang/Desktop/DQMC_projects_rawfiles/AF_by_heavy_electrons/rawfiles/N' \\\n",
    "                        +str(N)+'/local_orb_U'+str(U)+'_V'+str(Vs[iV1]) \\\n",
    "                        +'_tp'+str(tperp)+'_N'+str(N)+'_be'+str(be)+'_s1234567_mu0.0'\n",
    "\n",
    "                if os.path.isfile(data):\n",
    "                    #print data\n",
    "                    Ts.append(1./be)\n",
    "                    af = dqmc.Get_Saf_orb(data, mode, norb)\n",
    "                    Saf1.append(af[1,0]/N); Saf1_err.append(af[1,1]/N);\n",
    "                    Saf2.append(af[2,0]/N); Saf2_err.append(af[2,1]/N);\n",
    "\n",
    "\n",
    "            # plot\n",
    "            if len(Ts)>0:\n",
    "                idx = 0\n",
    "                errorbar(Ts, Saf2, yerr=Saf2_err, fmt='-', \\\n",
    "                         marker=Ms[idx], color=colors[idx], markersize=8, \\\n",
    "                         label='$f_2$')\n",
    "                errorbar(Ts, Saf1, yerr=Saf1_err, fmt='--', \\\n",
    "                         marker=Ms[idx+1], color=colors[idx+1], markerfacecolor='None', markersize=8, \\\n",
    "                         label='$f_1$')\n",
    "\n",
    "\n",
    "                #title('N'+str(N)+'_U'+str(U)+'_V'+str(Vs[iV1]))\n",
    "                legend(loc='best', fontsize=10, framealpha=1.0)\n",
    "                #grid('on')\n",
    "                #legend(bbox_to_anchor=[1.01, 0.5], loc='best', fontsize=8, framealpha=1.0)\n",
    "                #text(1.0, 18, '(c)', fontsize=22)\n",
    "                #xlim([0, 1.21])\n",
    "                #ylim([-20, 25])            \n",
    "                #xticks(tperps,tperps)\n",
    "                xscale('log')\n",
    "                xticks(fontsize=18)\n",
    "                yticks(fontsize=18)\n",
    "                #plt.tick_params(axis='x',          # changes apply to the x-axis\n",
    "                #                which='both',      # both major and minor ticks are affected\n",
    "                #                bottom=False,      # ticks along the bottom edge are off\n",
    "                #                top=False,         # ticks along the top edge are off\n",
    "                #                labelbottom=False) # labels along the bottom edge are off\n",
    "\n",
    "                ylabel('$S^f_{AF}/N$',fontsize=22) # staggered magnetization\n",
    "                xlabel('$T/t$',fontsize=22)\n",
    "\n",
    "                plt.tight_layout()\n",
    "                savefig(\"./figures_vs_T/Saf_vs_T_U\"+str(U)+'_V'+str(Vs[iV1])+'_tp'+str(tperp) \\\n",
    "                        +'_N'+str(N)+\".pdf\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Plot extrapolated N->infinity Saf vs T"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7ff5d2d13b90>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "Vs = [2.0] #1.2, 1.6, 2.0, 2.4, 2.8]\n",
    "tperps = [0.8, 1.2, 1.6, 2.0]\n",
    "betas = [1.0, 1.2, 1.5, 1.6, 2.0, 2.2, 2.5, 2.8, 3.0, \\\n",
    "         3.2, 3.5, 4.0, 4.2, 5.0, 6.0, 7.0, 8.0, 10.0, 12.0, 15.0, 20.0, 25.0, 30.0]#, 35.0, 40.0]\n",
    "betas = [1.0, 1.5, 2.0, 2.5, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 10.0, 12.0, 15.0, 20.0, 25.0, 30.0]#, 40.0]\n",
    "\n",
    "clf()\n",
    "for iV in range(0,len(Vs)):\n",
    "    V = Vs[iV]\n",
    "    for ip in range(0,len(tperps)):\n",
    "        tp = tperps[ip]\n",
    "        Ts = []; saf1 = []; saf2 = []\n",
    "        \n",
    "        data_extracted = './data/Saf_inf_vs_T_U'+str(U)+'_V'+str(V)+'_tp'+str(tp)+'_s1234567_mu0.0.txt'\n",
    "\n",
    "        if os.path.isfile(data_extracted):\n",
    "            os.remove(data_extracted)\n",
    "                \n",
    "        for ibe in range(0,len(betas)):\n",
    "            be = betas[ibe]\n",
    "            \n",
    "            data = './data/Saf_inf_U'+str(U)+'_be'+str(be)+'_s1234567_mu0.0.txt'\n",
    "\n",
    "            if os.path.isfile(data):\n",
    "                a = loadtxt(data, skiprows=0)\n",
    "\n",
    "                for i in range(0,len(a)):\n",
    "                    if a[i,0]==V and a[i,1]==tp:\n",
    "                        # manually modify some data for smooth curve:\n",
    "#                         if a[i,0]==2.0 and a[i,1]==0.9:\n",
    "#                             a[i,2]=0.02\n",
    "\n",
    "#                         if a[i,0]==1.6 and a[i,1]==1.5:\n",
    "#                             continue\n",
    "\n",
    "                        Ts.append(1./be)\n",
    "                        saf2.append(abs(a[i,2]))\n",
    "                        saf1.append(abs(a[i,3]))\n",
    "\n",
    "        if len(Ts)>0:\n",
    "            plot(Ts, saf2,'-', marker=Ms[ip], color=colors[ip], markersize=8, \\\n",
    "                 label='$t_{\\perp}/t=$'+str(tp))\n",
    "            plot(Ts, saf1,'--', marker=Ms[ip], color=colors[ip], markersize=8, markerfacecolor='None')\n",
    "\n",
    "        #title('U'+str(U)+'_V='+str(Vs[iV])+r'_$t_{\\perp}=$'+str(tperp))\n",
    "        legend(loc='best', fontsize=15, framealpha=1.0)\n",
    "        #grid('on')\n",
    "        #legend(bbox_to_anchor=[1.01, 0.5], loc='best', fontsize=8, framealpha=1.0)\n",
    "        #text(0.08, 0.13, '(b)', fontsize=26)\n",
    "        #xlim([0, 0.1])\n",
    "        #ylim([0, 0.2])\n",
    "        #ylim(ymin=0)\n",
    "        xticks([0, 0.05, 0.1, 0.15, 0.2], [0, 0.05, 0.1, 0.15, 0.2])\n",
    "        #xticks(tperps,tperps)\n",
    "        #xscale('log')\n",
    "        xlim(xmax=0.2)\n",
    "        xticks(fontsize=18)\n",
    "        yticks(fontsize=18)\n",
    "        #plt.tick_params(axis='x',          # changes apply to the x-axis\n",
    "        #                which='both',      # both major and minor ticks are affected\n",
    "        #                bottom=False,      # ticks along the bottom edge are off\n",
    "        #                top=False,         # ticks along the top edge are off\n",
    "        #                labelbottom=False) # labels along the bottom edge are off\n",
    "\n",
    "        ylabel('$S^f_{AF}/N$',fontsize=22) # staggered magnetization\n",
    "        xlabel('$T/t$',fontsize=22)\n",
    "\n",
    "        plt.tight_layout()\n",
    "        savefig(\"Saf_inf_vs_T_U\"+str(U)+\".pdf\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.14"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
